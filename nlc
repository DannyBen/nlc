#!/usr/bin/env python3
"""
nlc (Natural Language â†’ Command)

Usage:
    nlc MESSAGE...

Examples:
    nlc convert input.webm to output.mp4 using the best standards and ffmpeg
    nlc list all docker images older than a month and delete them
"""

import os
import sys
import subprocess
from textwrap import dedent

# ---- Config ----
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# ANSI
BOLD = "\033[1m"
GREEN = "\033[32m"
MAGENTA = "\033[35m"
BLUE = "\033[34m"
RESET = "\033[0m"
CLRLINE = "\033[2K"
CR = "\r"

SYSTEM_PROMPT = dedent("""
You are a command-line generator.
Return ONLY an executable bash command or sequence of commands.
NO backticks. NO explanations. NO comments.
Prefer widely-available tools. For media tasks, prefer ffmpeg when asked.
Default to safe, non-destructive options unless explicitly requested otherwise.
Quote/escape filenames or arguments when necessary.
If the request is ambiguous, choose sensible defaults rather than asking questions.
Output must be valid for /bin/bash -lc (newlines, pipes, redirection are fine).
""").strip()

def fail(msg, code=2):
    print(f"Error: {msg}", file=sys.stderr)
    sys.exit(code)

def strip_code_fences(s: str) -> str:
    s = s.strip()
    if s.startswith("```"):
        # remove leading fence line
        lines = s.splitlines()
        # drop first and last fence-like lines
        if lines and lines[0].startswith("```"):
            lines = lines[1:]
        if lines and lines[-1].startswith("```"):
            lines = lines[:-1]
        s = "\n".join(lines).strip()
    # also handle single/backtick wrapping accidentally returned
    return s.strip("`").strip()

def main():
    if len(sys.argv) < 2:
        print(__doc__.strip())
        sys.exit(1)

    user_request = " ".join(sys.argv[1:]).strip()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        fail("OPENAI_API_KEY not set")

    try:
        from openai import OpenAI
    except Exception:
        fail("OpenAI Python package not found. Install with: pip install openai")

    client = OpenAI(api_key=api_key)

    # minimal status
    print(f"\n{MAGENTA}processing...{RESET}", end="", flush=True)

    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_request},
            ],
            temperature=0,
            max_tokens=512,
        )
        raw = resp.choices[0].message.content or ""
    except Exception as e:
        print(f"{CR}{CLRLINE}Error contacting OpenAI: {e}")
        sys.exit(2)

    cmd = strip_code_fences(raw)
    if not cmd:
        print(f"{CR}{CLRLINE}Error: Model returned empty output")
        sys.exit(2)

    # show the command (keeps newlines), replacing "processing..."
    print(f"{CR}{CLRLINE}{BLUE}$ {BOLD}{GREEN}{cmd}{RESET} ", end="", flush=True)

    try:
        choice = input().strip()
    except KeyboardInterrupt:
        print("\nCancelled.")
        sys.exit(130)

    print("")

    if choice == "":
        try:
            # Run as one bash block; newlines/pipes are fine.
            completed = subprocess.run(cmd, shell=True, executable="/bin/bash")
            sys.exit(completed.returncode)
        except KeyboardInterrupt:
            print("\nInterrupted.")
            sys.exit(130)
    else:
        print("Cancelled.")
        sys.exit(0)

if __name__ == "__main__":
    main()
